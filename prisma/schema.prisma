// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Models based on the resume data structure

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resumes   Resume[]
}

model Resume {
  id                 String      @id @default(uuid())
  userId             String?
  name               String
  initials           String?
  location           String?
  locationLink       String?
  about              String?
  summary            String?
  avatarUrl          String?
  personalWebsiteUrl String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  user               User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  contact            Contact?
  education          Education[]
  work               Work[]
  skills             Skill[]
  projects           Project[]
}

model Contact {
  id        String   @id @default(uuid())
  resumeId  String   @unique
  email     String
  tel       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  social    Social[]
}

model Social {
  id        String   @id @default(uuid())
  contactId String
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model Education {
  id        String   @id @default(uuid())
  resumeId  String
  school    String
  degree    String
  start     String
  end       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Work {
  id          String      @id @default(uuid())
  resumeId    String
  company     String
  link        String?
  title       String
  start       String
  end         String? // Make end optional
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  resume      Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  tasks       WorkTasks[]
  badges      WorkBadge[]
}

model WorkTasks {
  id          String   @id @default(uuid())
  workId      String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  work        Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
}

model WorkBadge {
  id        String   @id @default(uuid())
  workId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String   @id @default(uuid())
  resumeId  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Project {
  id          String        @id @default(uuid())
  resumeId    String
  title       String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  resume      Resume        @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  techStack   ProjectTech[]
  link        ProjectLink?
}

model ProjectTech {
  id        String   @id @default(uuid())
  projectId String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectLink {
  id        String   @id @default(uuid())
  projectId String   @unique
  label     String
  href      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
